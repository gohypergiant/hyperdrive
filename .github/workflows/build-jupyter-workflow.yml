name: "Build, Tag and Push Notebook Servers to GHCR"

on:
  workflow_call:
    secrets:
      GHCR_TOKEN:
        required: true
    inputs:
      image:
        required: true
        type: string
      version:
        required: false
        type: string
        default: 0.0.3
      registry:
        required: false
        type: string
        default: ghcr.io
      dockerfile:
        required: false
        type: string
        default: docker/Dockerfile.base
      test:
        required: false
        type: boolean
        default: false

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: ${{fromJson(inputs.image)}}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3

      - name: Create Dockerfile.gpu
        if: ${{ matrix.image  == 'gpu-base' }}
        run: ./docker/gpu/create-gpu-dockerfile.sh && ls -la docker/gpu

#       -
#         name: Check out Efficient AutoML
#         uses: actions/checkout@v3
#         with:
#           repository: gohypergiant/research-EfficientAutoML
#           token: ${{ secrets.GH_PAT }}
#           path: research-EfficientAutoML
#           ref: development

      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      -
        name: Set current epoch time as env variable
        run: echo "NOW=$(date +%s)" >> $GITHUB_ENV

      -
        name: Echo current date
        run: echo $NOW

      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      -
        name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      -
        name: Login to Docker registry
        uses: docker/login-action@v1
        if: github.event_name != 'pull_request'
        with:
          registry: ${{ inputs.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      -
        name: Docker meta
        id: meta
        uses: crazy-max/ghaction-docker-meta@v2
        with:
          images: ghcr.io/${{ github.repository_owner }}/hyperdrive-jupyter
          labels: |
            maintainer=@gohypergiant
            org.opencontainers.image.title=Hyperdrive Notebooks Base Image
            org.opencontainers.image.description=A base image in the Hyperdrive Notebooks catalog
            org.opencontainers.image.vendor=Hypergiant, LLC.
            org.opencontainers.image.source=${{github.server_url}}/${{github.repository}}
          flavor: |
            prefix=${{ matrix.image }}
          tags: |
            type=edge
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-,suffix=-${{env.NOW}},format=short
            type=semver,pattern=${{ inputs.version }}
            type=semver,pattern={{major}}.{{minor}}

      -
        name: Debug docker images
        id: debug
        run: |
          echo "${{steps.meta.outputs.tags}}"

      -
        name: Build & Push Image
        id: docker-build
        uses: docker/build-push-action@v2
        env:
          DOCKER_BUILDKIT: 1
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          file: ${{ inputs.dockerfile }}
          target: ${{ matrix.image }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags}}, ghcr.io/gohypergiant/jupyter:${{ matrix.image }}
          labels: ${{ steps.meta.outputs.labels }}

      # -
      #   name: Scan image
      #   uses: anchore/scan-action@v3
      #   with:
      #     fail-build: false
      #     severity-cutoff: medium
      #     image: ghcr.io/${{ github.repository_owner }}/hypergiant-jupyter:${{ matrix.image }}

      -
        name: Test image
        if: ${{ inputs.test }}
        run: |
          docker run ghcr.io/gohypergiant/jupyter:${{ matrix.image }}
         